name: encoder

model:
  arch:
#     _target_: core.module.modules.encoder.small
#     in_dim: 2048
#     input_noise_factor: 0.001
#     latent_noise_factor: [0, 0.5]


    _target_: core.module.modules.encoder.medium
    in_dim: 3715
    input_noise_factor: 0.001
    latent_noise_factor: 0.1

#     _target_: core.module.modules.autoencoder.Latent_AE_cnn_small
#     in_dim: 2048

  data_transform:

train:
  optimizer:
    _target_: torch.optim.AdamW
    lr: 1e-3
    weight_decay: 2e-6

  lr_scheduler:

  loss_func:
    _target_: torch.nn.MSELoss
    reduction: sum

  trainer:
    _target_:  pytorch_lightning.trainer.Trainer
    strategy: 'auto'
    max_epochs: 30000
    check_val_every_n_epoch:
    val_check_interval : 3000
    log_every_n_steps: 1
    limit_val_batches: 1
    devices:
    - ${device.id}

    enable_model_summary: false

    callbacks:
    - _target_: pytorch_lightning.callbacks.ModelCheckpoint
#       dirpath: ${output_dir}/${system.name}/checkpoints
      filename: "{epoch}-{loss:.4f}"
      monitor: 'loss'
      mode: 'min'
      save_top_k: 2
      save_last: true
      verbose: true

    - _target_: pytorch_lightning.callbacks.ModelCheckpoint
#       dirpath: ${output_dir}/${system.name}/checkpoints
      filename: "{epoch}-{ae_acc:.4f}"
      monitor: 'ae_acc'
      mode: 'max'
      save_top_k: 2
      save_last: false
      verbose: true

    logger:
      _target_:  pytorch_lightning.loggers.TensorBoardLogger
      save_dir: ${output_dir}/${system.name}/
      name: '.'
      version: '.'
